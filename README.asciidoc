= Tensorics Core
Kajetan Fuchsberger <kajetan.fuchsberger@cern.ch>, Arkadiusz Gorzawski <arkadiusz.gorzawski@cern.ch>
2014-07-12
:icons: font
:sectanchors:
:source-highlighter: highlightjs
:examplesource: src/examples/org/tensorics/core/examples
:sourcecodedir: src/java/org/tensorics/core

Tensorics is a java framework which uses a tensor as a central object and provides methods to create, transform and performing calculations with those tensors. 

Just as a quick glimpse, another way to see a tensor (in the sense of tensorics) is a map from a set of partial keys (which is denoted as position) to a value. Into this it can be transformed:
[source, java]
----
Tensor<Double> aTensor = /* whatever it might be */;
Map<Position, Double> map = aTensor.asMap();
----

However, in the original form (as tensor), tensorics provides a big featureset of operations, for example:

* Structural operations (extractions, slicing) for any value type of tensors
* Fluent API for all operations on scalars and tensors.
* Mathematical operations based on algebraic structures (e.g. Field). Mathematical operations are possible any value for which those structures are defined. A default implementation is currently provided for doubles.
* Physical Quantities (value - unit pair), currently by the use of jscience.
* Tensors of quantities.
* Error and Validity propagation for quantities and tensors of quantities.
* Expression language for deferred execution, which opens the 
possibility for parallel processing and massive distribution of calculations. 

 
IMPORTANT: The current implementation is work in progress. The main purpose of the actual version is provide basic functionality of every of the above mentioned categories and proofing the concepts of their interplay. 
However, the available has useful applications in many contexts and is used in many applications. 
Almost no effort was put up to now on profiling and performance optimization. Therefore, it might well be that some operations are quite inefficient and/or memory consuming for big objects. Such improvements are definitely planned
for future iterations. Any contributions are welcome.
